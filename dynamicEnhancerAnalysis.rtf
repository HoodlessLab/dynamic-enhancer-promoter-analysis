{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww44600\viewh21780\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\ri0\partightenfactor0
\cf0 #in command line using bedtools\
\cf2 filePath = \'91insertYourFilePathHere\'92\
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 #take file with all enhancers identified in the project (concatenate all H3K4me1 and H3K27me3 peaks of all bed files, remove all regions that are promoters and then remove duplicates)\
\
\
#overlap master list of enhancers with H3K27ac, H3K27me3, H3K4me4 to annotate activation status at each time point\
\
bedtools intersect -loj -a /filePath/all_enhancers_.bed -b /filePath/ME_H3K27me3.bed | bedtools intersect -loj -a stdin -b /filePath/DE_H3K27me3.bed | bedtools intersect -loj -a stdin -b /filePath/HE_H3K27me3.bed | bedtools intersect -loj -a stdin -b /filePath/HEP_H3K27me3.bed >  /filePath/all_enhancers__H3K27me3.bed\
\
bedtools intersect -loj -a /filePath/all_enhancers_.bed -b /filePath/ME_H3K27ac.bed | bedtools intersect -loj -a stdin -b /filePath/DE_H3K27ac.bed | bedtools intersect -loj -a stdin -b /filePath/HE_H3K27ac.bed | bedtools intersect -loj -a stdin -b /filePath/HEP_H3K27ac.bed >  /filePath/all_enhancers__H3K27ac.bed\
\
bedtools intersect -loj -a /filePath/all_enhancers_.bed -b /filePath/ME_H3K4me3.bed | bedtools intersect -loj -a stdin -b /filePath/DE_H3K4me3.bed | bedtools intersect -loj -a stdin -b /filePath/HE_H3K4me3.bed | bedtools intersect -loj -a stdin -b /filePath/HEP_H3K4me3.bed >  /filePath/all_enhancers__H3K4me3.bed\
\
#in R\
library \'93dbplyr\'94\
library \'93dplyr\'94\
library \'93utils\'94\
library \'93anchors\'94\
\
#the tables from the first step have to be cleaned up in R to be used for the downstream analysis as the output from bedtools can\'92t be used directly \
#create variable containing all chromosomes \
chrnumber <- c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", "chr17", "chr18", "chr19", "chr20", "chr21", "chr22", "chrX", "chrY")\
\
#input into this script is a table with chromosome locations in the first 3 rows (standard bed file format) and then a chromosome location which indicates a match was found-> this location is for an instant repressed etc. or a \'93.\'94 meaning this location is not repressed\
#looks like this, in this example with just two timepoints, not 4\
# chr		start		end		match found_timepoint_1		match found_timepoint_2\
# chr1	23456	34567	.						.\
# chr2	23456	34567	chr2						.\
\
\
#load input table containing enhancers and information if they are repressed at all time points\
enhancer_repressed <- read.csv("filePath/masterlist_H3K27me3.bed.csv\'94, header = FALSE)\
\
#replace the \'93chr\'94 in the repressed table with \'93K27me3\'94\
for (value in chrnumber)\{ chr <- value\
	enhancer_repressed[] <- lapply(enhancer_repressed, as.character)\
	enhancer_repressed$V5[enhancer_repressed$V5== chr]<- "K27me3"\
	enhancer_repressed$V6[enhancer_repressed$V6== chr]<- "K27me3"\
	enhancer_repressed$V7[enhancer_repressed$V7== chr]<- "K27me3"\
	enhancer_repressed$V8[enhancer_repressed$V8== chr]<- "K27me3"\
\}\
enhancer_repressed <- enhancer_repressed %>%distinct(.keep_all = TRUE)\
\
#load input table containing enhancers and information if they are active\
enhancer_active <- read.csv("filePath/masterlist_H3K27ac.bed.csv\'94, header = FALSE)\
\
#replace the \'93chr\'94 in the active table with \'93active\'94\
for (value in chrnumber)\{ chr <- value\
	enhancer_active[] <- lapply(enhancer_active, as.character)\
	enhancer_active$V5[enhancer_active$V5== chr]<- "active"\
	enhancer_active$V6[enhancer_active$V6== chr]<- "active"\
	enhancer_active$V7[enhancer_active$V7== chr]<- "active"\
	enhancer_active$V8[enhancer_active$V8== chr]<- "active"\
\}\
enhancer_active <- enhancer_active %>%distinct(.keep_all = TRUE)\
\
#merge the repressed and active states tables together in one table\
enhancer_repressed_active <- merge(enhancer_repressed, enhancer_active, by = c("V1","V2", "V3", "V4"))\
\
#combine the columns of the two joined datasets into joined columns\
for (value in 1:nrow(enhancer_repressed_active))\{\
  if (enhancer_repressed_active$V5.x[[value]] == ".") \{enhancer_repressed_active$V5.x[[value]] <- enhancer_repressed_active$V5.y[[value]]\}\
  if (enhancer_repressed_active$V6.x[[value]] == ".") \{enhancer_repressed_active$V6.x[[value]] <- enhancer_repressed_active$V6.y[[value]]\} \
  if (enhancer_repressed_active$V7.x[[value]] == ".") \{enhancer_repressed_active$V7.x[[value]] <- enhancer_repressed_active$V7.y[[value]]\}\
  if (enhancer_repressed_active$V8.x[[value]] == ".") \{enhancer_repressed_active$V8.x[[value]] <- enhancer_repressed_active$V8.y[[value]]\}\
\}\
\
#only keep the joined columns \
enhancer_repressed_active <- enhancer_repressed_active[,c(1:8)]\
\
#load input table containing enhancers and information if they are primed\
enhancer_primed <- read.csv("filePath/masterlist_H3K4me1.bed.csv\'94, header = FALSE)\
\
#replace the \'93chr\'94 in the primed table with \'93primed\'94\
for (value in chrnumber)\{ chr <- value\
	enhancer_primed[] <- lapply(enhancer_primed, as.character)\
	enhancer_primed$V5[enhancer_primed$V5== chr]<- "primed"\
	enhancer_primed$V6[enhancer_primed$V6== chr]<- "primed"\
	enhancer_primed$V7[enhancer_primed$V7== chr]<- "primed"\
	enhancer_primed$V8[enhancer_primed$V8== chr]<- "primed"\
\}\
enhancer_primed <- enhancer_primed %>%distinct(.keep_all = TRUE)\
\
#merge the primed states tables together with repressed_active states table in one table\
enhancer_repressed_active_primed <- merge(enhancer_primed, enhancer_repressed_active, by = c("V1","V2", "V3", "V4"))\
\
for (value in 1:nrow(enhancer_repressed_active_primed))\{\
  if (enhancer_repressed_active_primed$V5.x[[value]] == ".") \{enhancer_repressed_active_primed$V5.x[[value]] <- enhancer_repressed_active_primed$V5.y[[value]]\}\
  if (enhancer_repressed_active_primed$V6.x[[value]] == ".") \{enhancer_repressed_active_primed$V6.x[[value]] <- enhancer_repressed_active_primed$V6.y[[value]]\} \
  if (enhancer_repressed_active_primed$V7.x[[value]] == ".") \{enhancer_repressed_active_primed$V7.x[[value]] <- enhancer_repressed_active_primed$V7.y[[value]]\}\
  if (enhancer_repressed_active_primed$V8.x[[value]] == ".") \{enhancer_repressed_active_primed$V8.x[[value]] <- enhancer_repressed_active_primed$V8.y[[value]]\}\
\}\
\
#only keep the joined columns \
enhancer_repressed_active_primed <- enhancer_repressed_active_primed[,c(1:8)]\
\
#replace all remaining  .  in the dataset with \'93unmarked\'94. Those are enhancers which are \'93unmarked\'94 or we have no information about this time point\
 \
for (value in 1:nrow(enhancer_repressed_active_primed))\{\
  if (enhancer_repressed_active_primed$V5.x[[value]] == ".") \{enhancer_repressed_active_primed$V5.x[[value]] <- "unmarked"\}\
  if (enhancer_repressed_active_primed$V6.x[[value]] == ".") \{enhancer_repressed_active_primed$V6.x[[value]] <- "unmarked"\}\
  if (enhancer_repressed_active_primed$V7.x[[value]] == ".") \{enhancer_repressed_active_primed$V7.x[[value]] <- "unmarked"\}\
  if (enhancer_repressed_active_primed$V8.x[[value]] == ".") \{enhancer_repressed_active_primed$V8.x[[value]] <- "unmarked"\}\
  \}\
\
#this is a table with all enhancers in bed format in the columns (V1 is empty) V2, V3, V4 and their status at the four timepoints (ME, DE, HE and HEP) in V5, V6, V7 and V8\
#this file is the input file to create the alluvial plot\
write.csv(enhancer_repressed_active_primed, file = "/filePath/enhancer_repressed_active_primed.csv")\
\
#make alluvial plot\
library("operators\'94)\
library("alluvial\'94)\
library("ggplot2\'94)\
library("ggalluvial\'94)\
\
# contains data\
data <- read.csv("/filePath/enhancer_repressed_active_primed.csv")\
data <- data[,c(6:9)]\
#remove duplicates and save as data_combo as this file has every combination of states that exists in the dataset\
data_combo <- data %>%distinct(.keep_all = TRUE)\
\
#max_row is number of rows in data_combo, assign to variable \
\
#count how many occurrences of every combination of activation status exists in the data set\
\
for(n in 1:max_row) \{\
 \
  x <- sum(data$V5 == data_combo$ME[n] & data$V6== data_combo$DE[n]& data$V7== data_combo$HE[n] & data$V8== data_combo$HEP[n])\
  data_combo$freq[n] <- x\
\}\
\
#save alluvial data\
write.csv(data_combo,"/filePath/alluvial_plot_data.csv" )\
\
\
#plot alluvial plot\
alluvial_data <- data_combo\
ggplot(as.data.frame(alluvial_data),\
       aes(y = freq, axis1 = ME, axis2 = DE, axis3 = HE, axis4 = HEP)) +\
  geom_alluvium(aes(fill = HEP), width = 1/12) +\
  geom_stratum(width = 1/20, fill = "black", color = "grey") +\
  geom_label(stat = "stratum", label.strata = TRUE) +\
  theme_bw() +\
  scale_x_discrete(limits = c("ME", "DE", "HE", "HEP"), expand = c(.05, .05) ) +\
  scale_fill_brewer(type = "seq", palette = "Set1")\
\
\
\
}